package com.mykapps.androidlearners.fragment;

import android.annotation.SuppressLint;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.mykapps.androidlearners.R;
import com.mykapps.androidlearners.adapter.FavoritesAdapter;
import com.mykapps.androidlearners.adapter.TopicAdapter;
import com.mykapps.androidlearners.data.Contract;
import com.mykapps.androidlearners.data.JsonDataList;

import java.util.ArrayList;
import java.util.List;


public class FavoritesFragment extends Fragment implements LoaderManager.LoaderCallbacks<Cursor> {

    private static int FAVORITES_ID = 100;
    /**
     * RecyclerView , custom List (LIST<JsonDataList>) variables created
     */
    private RecyclerView favoritesRecycleViewMain;
    private FavoritesAdapter favoritesrecycleviewAdapterMain;
    private int gridCount;

    public static int calculateNoOfColumns(Context context) {
        DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
        float dpWidth = displayMetrics.widthPixels / displayMetrics.density;
        int scalingFactor = 180;
        int noOfColumns = (int) (dpWidth / scalingFactor);
        return noOfColumns;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View rootview = inflater.inflate(R.layout.fragment_favorites, container, false);
        favoritesRecycleViewMain = rootview.findViewById(R.id.favorites_recyclerview);
        setupRecyclerView(favoritesRecycleViewMain);
        return rootview;
    }

    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        getLoaderManager().initLoader(FAVORITES_ID, null, this);
    }

    @SuppressLint("StaticFieldLeak")
    @Override

    public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {


        return new CursorLoader(getContext(), Contract.EntryInfo.CONTENT_URI,
                null,
                null,
                null,
                null);
        // onStartLoading() is called when a loader first starts loading data
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader     The Loader that has finished.
     * @param cursorData The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursorData) {
        // Update the data that the adapter uses to create ViewHolders
        favoritesrecycleviewAdapterMain.swapCursor(cursorData);

    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        favoritesrecycleviewAdapterMain.swapCursor(null);

    }

    private void setupRecyclerView(@NonNull RecyclerView recyclerView) {
        favoritesrecycleviewAdapterMain = new FavoritesAdapter();
        recyclerView.setAdapter(favoritesrecycleviewAdapterMain);

        recyclerView.setHasFixedSize(true);
        gridCount = calculateNoOfColumns(getActivity());
        recyclerView.setLayoutManager(new GridLayoutManager(getContext(), gridCount));
    }

}

